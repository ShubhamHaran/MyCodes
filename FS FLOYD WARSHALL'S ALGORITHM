Aravind went to a forest, he stuck inside the forest and He is blind.
The forest is given as a square grid. The forest grid is filled with trees and empty cells.
He can move upwards, downwadrs, left and right, but he cannot stop until he touches the tree.
Once he touches a tree, ha can choose the next direction to move.
Intially Aravind is at poistion A, and he is trying to reach a safe-point at position S.

You will be given the forest grid filled with 1's and 0's, 1 means tree and 0 means empty cell.
And initial position of Aravind, safe-point S.

Your task is to find the minimum distance travelled by Aravind to reach the safe-point
If he cannot stop at the safe-point, return -1.

You may assume that the borders of the forest are all trees.

Input Format:
-------------
Line-1: An integer N, size of the grid.
Next N lines: N space separated integers
Next line:  two space separated integers, initial position of Aravind
Next line:  two space separated integers, position of safe-point.

Output Format:
--------------
Print an integer, minimum distance travelled by Aravind to reah safe-point.


Sample Input-1:
---------------
5
0 1 0 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 0 1
0 0 0 0 0
2 4
4 0

Sample Output-1:
----------------
10

Explanation:
------------
For Picture look at hint.
The minimum path is : up -> left -> down -> left.

Sample Input-2:
---------------
5
0 1 0 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 0 1
0 0 0 0 0
0 3
3 3

Sample Output-2:
----------------
-1

Explanation: 
------------
Aravind cannot stop at safe-point.

import java.util.*;
class pro{
    static int count=-1;
    static int frm_x;
    static int frm_y;
    static int grid[][];
    static int[][]go=new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
    static void backtrack(int x,int y,int dp[][])
    {
        int fx,fy,steps,nx,ny;
        for(int i[]:go){
            fx=i[0];
            fy=i[1];
            steps=0;
            nx=x+fx;
            ny=y+fy;
            while(grid[nx][ny]!=1){
                steps+=1;
                nx+=fx;
                ny+=fy;
            }
            nx-=fx;
            ny-=fy;
            if(dp[nx][ny]<=dp[x][y]+steps) continue;
            dp[nx][ny]=dp[x][y]+steps;
            backtrack(nx,ny,dp);
        }
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        grid=new int[n+2][n+2];
        for(int i=0;i<n+2;i++){ grid[i][0]=1; grid[0][i]=1;grid[n+1][i]=1; grid[i][n+1]=1;}
        int dp[][]=new int[n+2][n+2];
        for(int i=0;i<=n+1;i++){ for(int j=0;j<=n+1;j++) {dp[i][j]=Integer.MAX_VALUE;}}
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                grid[i][j]=sc.nextInt();
            }
        }
        int to_x=sc.nextInt()+1;
        int to_y=sc.nextInt()+1;
        frm_x=sc.nextInt()+1;
        frm_y=sc.nextInt()+1;
        dp[to_x][to_y]=0;
        backtrack(to_x,to_y,dp);
        if(dp[frm_x][frm_y]==Integer.MAX_VALUE) System.out.println(-1); else
        System.out.print(dp[frm_x][frm_y]);
        
        
        
        
        }
    }
