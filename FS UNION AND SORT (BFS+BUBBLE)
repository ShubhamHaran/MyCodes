Krishna is working on strings, He is trying to modify the string 
which has to be first in lexicographic order.
You can modify the string using following operations:
	- Interchnage the characters at the given pair of indices.
	- You can perform the interchange of the pair any number of times.
	- You will be given I number of pairs

Example: 
--------
If pair is ->[i,j], you can interchange the characters at i-th and j-th indices
with each other.

Krishna is given a String S, an integer I and I pairs of indices.
Can you help Krishna to find the string that can be formed 
after performing interchange operations, which has to be first in the
lexicographical order.

Note: String contains only lowercase letters.


Input Format:
-------------
Line-1: A string S
Line-2: An integer I, number of interchanges.
Next I lines: Two space separated integers, interchange pair.

Output Format:
--------------
A string, lexicographic smallest string after the interchanges


Sample Input-1:
---------------
cba
2
0 1
1 2

Sample Output-1:
----------------
abc

Explaination: 
-------------
Interchange s[0] and s[1], s = "bca"
Interchange s[1] and s[2], s = "bac"
Interchange s[0] and s[1], s = "abc"


Sample Input-2:
---------------
dcab
2
0 3
1 2

Sample Output-2:
----------------
bacd

Explaination: 
-------------
Interchange s[0] and s[3], s = "bcad"
Interchange s[1] and s[2], s = "bacd"


Sample Input-3:
---------------
dcab
3
0 3
1 2
0 2

Sample Output-3:
----------------
abcd

Explaination: 
-------------
Interchange s[0] and s[3], s = "bcad"
Interchange s[0] and s[2], s = "acbd"
Interchange s[1] and s[2], s = "abcd"
===========================================================================================================
import java.util.*;
class pair{
    int x;
    int y;
    pair(int x,int y){
        this.x=x;
        this.y=y;
    }
}
class pro{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        int n=sc.nextInt();
        pair[]p=new pair[n];
        for(int i=0;i<n;i++){
            p[i]=new pair(sc.nextInt(),sc.nextInt());
        }
        char[]word=new char[s.length()];
        boolean visited[]=new boolean[s.length()];
        Queue<Integer>q=new LinkedList<>();
        for(int i=0;i<s.length();i++){
            if(visited[i]==false){
                List<Integer>idx=new ArrayList<>();
                List<Character>ch=new ArrayList<>();
                q.add(i);
                while(q.size()!=0){
                    int key=q.poll();
                    if(visited[key]) continue;
                    idx.add(key);
                    ch.add(s.charAt(key));
                    visited[key]=true;
                for(int j=0;j<n;j++){
                    if(p[j].x==key&&visited[p[j].y]==false) q.add(p[j].y);
                    if(p[j].y==key&&visited[p[j].x]==false) q.add(p[j].x);
                }
                }
                Collections.sort(idx);
                Collections.sort(ch);
                for(int j=0;j<idx.size();j++)
                word[idx.get(j)]=ch.get(j);
            }
        }
        String ans=new String(word);
        if(ans.compareTo(s)>0)
        System.out.println(s);
        else
        System.out.println(ans);
    }}
        
