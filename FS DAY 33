Consider a pair of integers, (a,b). The following operations can be performed 
on (a,b) in any order, zero or more times:
	- (a,b) -> ( a+b, b )
	- (a,b) -> ( a, a+b )

For example, starting with (1,1), perform the operation (1, 1+1) to get (1,2), 
perform the operation (1+2, 2) to get (3,2), and perform the operation (5,2). 
Alternatively the first operation could be (1+1, 1) to et (2,1) and so on.

Your task is to build a function must return a string that denotes whether or not 
you can convert (a,b) to (c,d) by performain zero or more the operations specified above. 

If it is possible, return true, otherwise false.

NOTE: 
1<= a,b,c,d <= 1000

Input Format:
-------------
Line-1: Two space separated integers, a,b
Line-2: Two space separated integers, c,d

Output Format:
--------------
Return a boolean value.


Sample Input-1:
---------------
1 2
5 4

Sample Output-1:
----------------
true


Sample Input-2:
---------------
2 3
10 7

Sample Output-2:
----------------
false

===============================================================================
import java.util.*;
class pair{
    int x;
    int y;
    pair(int x,int y){
        this.x=x;
        this.y=y;
    }
}
class pro{
    
    static Set<pair>st;
    static int c;
    static int d;
    static boolean doit(pair p){
        if(st.contains(p)) return false;
        if(p.x==c&&p.y==d) return true;
        if(p.x>1000||p.y>1000) return false;
        pair p1=new pair(p.x+p.y,p.y);
        pair p2=new pair(p.x,p.x+p.y);
        st.add(p);
        //System.out.println(p.x+" "+p.y);
        return(doit(p1)||doit(p2));
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        c=sc.nextInt();
        d=sc.nextInt();
        st=new HashSet<>();
        pair p1=new pair(m+n,n);
        pair p2=new pair(m,m+n);
        pair p=new pair(m,n);
        st.add(p);
        System.out.println(doit(p1)||doit(p2));
        
        
    }
}
