Bunny is playing with binary strings.
He wants to divide a binary string B into 3 parts, each part length is >= '1',
when we combine the 3 parts will result the string B.
eg. B is divided as d1, d2, d3. if we combine d1, d2 and d3 should result B.

Your task is to find the number of ways to divide the Binary String B 
into 3 parts, where each part should contain equal number of 1's.

The answer may be too large, return it modulo 10^9 + 7.

Input Format:
-------------
A string B, a binary string B.

Output Format:
--------------
Print an integer, number of ways to break B.


Sample Input-1:
---------------
01010010

Sample Output-1:
----------------
6

Explanation:
------------
There are six ways to break S into 3 parts 
where each part contain the equal number of  1's.
01 | 01 | 0010
01 | 010 | 010
01 | 0100 | 10
010 | 1 | 0010
010 | 10 | 010
010 | 100 | 10


Sample Input-2:
---------------
010010

Sample Output-2:
----------------
0







import java.util.*;
class pro{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        int count=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='1') count+=1;
        }
        int n=s.length();
        if(count%3!=0)
        System.out.println(0);
        else if(count==0)
        System.out.println((n-1)*(n-2)/2);
        else{
        int div=count/3;
        int start[]=new int[3];
        int end[]=new int[3];
        int k=0;
        int st=0;
        int ed=0;
        count=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='1'){
                if(count==0){
                    st=i;
                }
                if(count==div-1){
                    ed=i;
                    count=0;
                    start[k]=st;
                    end[k]=ed;
                    k++;
                    continue;
                }
                count+=1;
            }
        }
        //for(int i=0;i<3;i++) System.out.println(start[i]+" "+end[i]);
        int mod=1000000007;
        long sum=(start[1]-end[0])*(start[2]-end[1]);
        System.out.println(sum%mod);
        }
        
        
    }
}
