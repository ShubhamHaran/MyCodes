Vihaar is working with strings. 
He is given two strings A and B, and another string T,
where the length of A and B is same.

You can find the relative groups of letters from A and B,
using the following rule set:
	- Equality rule: 'p' == 'p'
	- Symmetric rule: 'p' == 'q' is same as 'q' == 'p'
	- Transitive rule: 'p' == 'q' and 'q' == 'r' indicates 'p' == 'r'.
	
Vihaar has to form the relatively smallest string of T,
using the relative groups of letters.

For example, if A ="pqr" and B = "rst" , 
then we have 'p' == 'r', 'q' == 's', 'r' == 't' .

The relatives groups formed using above rule set are as follows: 
[p, r, t] and [q,s. And String T ="tts", then relatively smallest string is "ppq".

You will be given the strings A , B and T.
Your task is to help Vihaar to find the relatively smallest string of T.

Input Format:
-------------
Three space separated strings, A , B and T

Output Format:
--------------
Print a string, relatively smallest string of T.


Sample Input-1:
---------------
kmit ngit mgit

Sample Output-1:
----------------
ggit

Explanation: 
------------
The relative groups using A nd B are [k, n], [m, g], [i], [t] and
the relatively smallest string of T is "ggit"


Sample Input-2:
---------------
attitude progress apriori

Sample Output-2:
----------------
aaogoog

Explanation: 
------------
The relative groups using A nd B are [a, p], [t, r, o], [i, g] and [u, e, d, s]
the relatively smallest string of T is "aaogoog"
======================================================================================
import java.util.*;
class pro{
    static int find(int i,int parent[]){
        if(parent[i]==i) return i;
        return parent[i]=find(parent[i],parent);
    }
    static void union(char c1,char c2,int[]parent){
        int p1=find(c1-'a',parent);
        int p2=find(c2-'a',parent);
        int daddy=Math.min(p1,p2);
        parent[p1]=daddy;
        parent[p2]=daddy;
        //parent[p3]=daddy;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int parent[]=new int[26];
        for(int i=0;i<26;i++) parent[i]=i;
        String s1=sc.next();
        String s2=sc.next();
        String s3=sc.next();
        for(int i=0;i<s1.length();i++){
            union(s1.charAt(i),s2.charAt(i),parent);
        }
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<s3.length();i++){
            sb.append((char)(97+find(s3.charAt(i)-97,parent)));
        }
        System.out.print(sb);
    }
}
