A device is secured with a digital lock, 
The digital lock is made up of a 3*3 grid like below:
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |
3+5+3+3+5+3+8+10

The lock is secured by creating pattern using the above grid.
A valid pattern as formed as follows:

Rules for a valid pattern:
	- Each pattern must connect at least m keys and at most n keys.
	- All the keys must be distinct.
	- If the line connecting two consecutive keys in the pattern passes through 
	  any other keys, the other keys must have already the part of the pattern. 
	  No jumps through a key which is not part of the pattern is allowed.
	- The order of keys used matters.
 
You will be given two integers m and n, where 1 ≤ m ≤ n ≤ 9, 
Your task is to count the total number of patterns of the device lock, 
which consist of minimum of m keys and maximum n keys. 

Examples of valid and invalid patterns:
	Invalid move: 4 - 1 - 3 - 6
	Line 1 - 3 passes through key 2 which had not been part of the pattern.

	Invalid move: 4 - 1 - 9 - 2
	Line 1 - 9 passes through key 5 which had not been part of the pattern.

	Valid move: 2 - 4 - 1 - 3 - 6
	Line 1 - 3 is valid because it passes through key 2, which had been part 
	of the pattern

	Valid move: 6 - 5 - 4 - 1 - 9 - 2
	Line 1 - 9 is valid because it passes through key 5, which had been part 
	of the pattern

Input Format:
-------------
Two space separated integers M and N.

Output Format:
--------------
Print an integer, number of valid patterns formed using the grid.


Sample Input-1:
---------------
1 1

Sample Output-1:
----------------
9


Sample Input-2:
---------------
1 2

Sample Output-2:
----------------
65




import java.util.*;
class pro{
    static int jumps[][];
    static boolean visited[];
    public static int dfs(int num,int len,int count,int m,int n){
        if(len>=m) count++;
        len+=1;
        if(len>n) return count;
        visited[num]=true;
        for(int i=1;i<=9;i++){
            int jump=jumps[num][i];
        if(!visited[i]&&(jump==0||visited[jump])){
            count=dfs(i,len,count,m,n);
        }}
        visited[num]=false;
        return count;
    }
    
    public static void doit(int m,int n){
        jumps[1][3]=jumps[3][1]=2;
        jumps[1][7]=jumps[7][1]=4;
        jumps[1][9]=jumps[9][1]=jumps[3][7]=jumps[7][3]=jumps[4][6]=jumps[6][4]=jumps[2][8]=jumps[8][2]=5;
        jumps[7][9]=jumps[9][7]=8;
        jumps[3][9]=jumps[9][3]=6;
        int count=0;
        count+=dfs(1,1,0,m,n)*4;
        count+=dfs(2,1,0,m,n)*4;
        count+=dfs(5,1,0,m,n);
        System.out.println(count);
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        jumps=new int[10][10];
        visited=new boolean[10];
        doit(m,n);
        sc.close();
    }
}
